# -*- coding: utf-8 -*-
"""activate_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14U9CziW3MRggLqrTIirZzRYTeEkkNRLs
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

import torch
from torchvision import datasets, models, transforms
import torch.nn as nn
from torch.nn import functional as F
import torch.optim as optim
import torchvision

from PIL import Image

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model = models.resnet18(weights=None).to(device)
model.fc = nn.Sequential(
               nn.Linear(512, 128),
               nn.ReLU(inplace=True),
               nn.Linear(128, 2)).to(device)

model.load_state_dict(torch.load("/content/drive/MyDrive/machine learning projects/monkey pox/weight/resnet(18).h5"), strict=False) #모델 저장 위치 바꾸기 여기서 resnet(18, 50, 101)구분 잘하기

import os
test_file= os.listdir("/content/drive/MyDrive/machine learning projects/training set/monkey pox/test/monkeypox") #/content/drive/MyDrive/machine learning projects/training set/monkey pox/test/monkeypox 여기다가 테스트 폴더 위치 변경 이거 데이터셋임
print(test_file)
classes = ['others', 'monkeypox']
print(classes)
#이건 테스트할 테스트 데이터 셋인데 저장해둔 사진 파일 위치 올려놓기

file_list = [Image.open( "/content/drive/MyDrive/machine learning projects/training set/monkey pox/test/monkeypox/" + img_path) for img_path in test_file]
print(file_list)
#위에 문장에서 파일명을 받았으니 파일명과 나머지 주소를 합치는 과정

normalize = transforms.Normalize(mean=[0.485, 0.456, 0.406],
                                 std=[0.229, 0.224, 0.225])

data_transforms = {
    'train':
    transforms.Compose([
        transforms.Resize((224,224)),
        transforms.RandomAffine(0, shear=10, scale=(0.8,1.2)),
        transforms.RandomHorizontalFlip(),
        transforms.ToTensor(),
        normalize
    ]),
    'test':
    transforms.Compose([
        transforms.Resize((224,224)),
        transforms.ToTensor(),
        normalize
    ]),
}
#이미지 전처리 과정인데 여기서 'test' 부분으로 test데이터셋 resize해서 이미지 크기 평준화 시키는곳

validation_batch1 = torch.stack([data_transforms['test'](img).to(device)
                                for img in file_list])

#이건 내가 위에꺼가 원숭이두창, 나머지로 원숭이두창, 나머지의 결과가 어떻게 나오나 보려고 나눠둔것 validation_batch한개만 있어도 상관 없음

pred_logits_tensor = model(validation_batch1)
pred_logits_tensor

pred_probs = F.softmax(pred_logits_tensor, dim=1).cpu().data.numpy()
pred_probs
#여기다가 100곱하면 %나옴

fig, axs = plt.subplots(len(file_list), 1, figsize=(150, 100))
for i, img in enumerate(file_list):
    ax = axs[i]
    ax.axis('off')
    ax.set_title("{:.0f}% other, {:.0f}% monkeypox".format(100*pred_probs[i,0],
                                                            100*pred_probs[i,1])) #확률 100곱해주는 문장
    ax.imshow(img)

